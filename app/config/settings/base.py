"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see

https://docs.djangoproject.com/en/2.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import datetime
import json
import os
import random
import string
from django.utils.translation import ugettext_lazy as _
from celery.schedules import crontab


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
ROOT_DIR = os.path.dirname(BASE_DIR)
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRETS
SECRETS_DIR = os.path.join(ROOT_DIR, '.secrets')
secrets = json.load(open(os.path.join(SECRETS_DIR, 'base.json')))
SECRET_KEY = secrets['SECRET_KEY']

# Static & Media Settings : DEBUG True 옵션으로 Django 서버에서 정적파일 처리 위한 설정(개발용)

# Static DIR
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    STATIC_DIR,
]
STATIC_URL = '/static/'

# collectstatic 사용시의 이동 루트
STATIC_ROOT = os.path.join(ROOT_DIR, '.static')

# Media DIR
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(ROOT_DIR, '.media')


# Auth User Model(Default User Model settings)
AUTH_USER_MODEL = 'members.User'

# SECURITY WARNING: don't run with debug turned on in production!

# Application definition
INSTALLED_APPS = [
    'members',
    'tables',
    'information',
    'openpyxl',
    'django.contrib.postgres',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'django_elasticsearch_dsl',
    'django_elasticsearch_dsl_drf',
    'rangefilter',
    # 'django_summernote',
]

REST_FRAMEWORK = {
    # DRF Token authentication
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),

    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        # Any other parsers
    ),

    # DRF Throttling
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day'
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATES_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGES = [
    ('ko-KR', _('Korean')),
    ('en-us', _('English')),
]

LANGUAGE_CODE = 'ko-KR'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Celery Settings
CELERY_BROKER_URL = secrets['CELERY_URL']
CELERY_RESULT_BACKEND = secrets['CELERY_RESULT_BACKEND']
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULE = {
    'user-default-log-per-month': {
        'task': 'tables.tasks.make_default_log_monthly',
        'schedule': crontab(day_of_month="1", hour=0, minute=0)
    },
    'table-renewal-per-day': {
        'task': 'tables.tasks.table_renewal',
        'schedule': crontab(hour=0, minute=0)
    },
    'table-log-renewal-per-year': {
        'task': 'tables.tasks.table_log_renewal',
        'schedule': crontab(month_of_year="1", day_of_month="1", hour=0, minute=0)
    },
}

# ElasticSearch_DSL
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'localhost:9200'
    }
}


# SummerNote settings
# SUMMERNOTE_THEME = 'bs4'


# SUMMERNOTE editor configuration
# def random_string():
#     rand_string = string.ascii_letters + string.digits
#     return ''.join(random.choice(rand_string) for i in range(8))
#
#
# def summernote_custom_upload_to():
#     return ".media/" + datetime.datetime.now().strftime("%Y-%m-%d") + f'/{random_string()}'
#
#
# SUMMERNOTE_CONFIG = {
#     'summernote': {
#         'lang': 'ko-KR',
#     },
#     'attachment_absolute_uri': True,
#     'attachment_model': 'tables.TableAttachment',
#     'attachment_upload_to': summernote_custom_upload_to(),
# }
